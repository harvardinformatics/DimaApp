\documentclass[a4paper]{article}
\usepackage{Sweave}
\begin{document}

\title{}
\author{}

\maketitle

<<label=libraries, echo=FALSE, eval=TRUE>>=
library(ggplot2)
library(gridExtra)

options(stringsAsFactors=FALSE)

@ 

<<label=functions>>=
require(reshape)

getSampleName <- function(df) {
    cnames <- as.character(colnames(df))
    xl <- strsplit(cnames, split='_')
    xl <- lapply(xl, function(x) x[1])
    x <- sub('S', '', unlist(xl))
    spls <- unique(x)
    return(spls)
}

modTMTsixplexLabelNames <- function(df) {
    ## label names are 126, 127, ..., 131
    ## data table is read and columns relabeled in ds_resources_21JAN17.Rnw:label=datamatricesnotnormalized
    ## labels/colnames prefixed with sample identifiers: S227, S238, etc
    ## modTMTsixplexLabelNames() removes sample prefix
    colnames(df) <- sub('S.*_', '', colnames(df))
    return(df)
}

gplot_parallel <- function(hdf, df, contrast) {
    ## slightly modified copy of gplot_hkprots()
    ## parallelplots of abundances of sets of proteins
    ## parameters:
    # hdf: data.frame of housekeeping proteins
    # df: data.frame sample data
    # contrast: eg., 'TP5 vs TP4', to determine the scale
    hdf <- modTMTsixplexLabelNames(hdf) # added D21217
    xhdf <- namerows(hdf, col.name='Protein')
    xhdf <- melt(xhdf, id.var = 'Protein')
    colnames(xhdf) <- c('Protein', 'Samples', 'Abundance')

    xmin <- min(df, na.rm=TRUE)
    xmax <- max(df, na.rm=TRUE)
    s <- deparse(substitute(hdf))
    sl <- unlist(strsplit(s, '\\.'))[1]
    sl <- unlist(strsplit(sl, 'k'))[2]

    ## ===!!CAREFUL, fix this!!===
    # legend.position = 'bottom' for parallelplots
    # legend.position = 'right' for parallelplots
    pg <- ggplot(xhdf, aes(Samples, Abundance, group=Protein, color=Protein)) + geom_line()
    pg <- pg + theme(axis.text.x = element_text(angle = 0, hjust = 1), plot.title=element_text(color='blue', hjust=0.5))
    ## NOTICE: removed abundance limit values (D21217)
    #pg <- pg + scale_y_continuous(limits = c(xmin, xmax )) + labs(x='Time Points', size=8)
    pg <- pg + labs(x='Development Stage', size=10)
    pg <- pg + ggtitle(paste('', contrast, sep=' ')) 
    pg <- pg + theme(legend.position = 'bottom', legend.text = element_text(size = 8, color='black'),
                     axis.text.x = element_text(angle = 90, size=8),
                     axis.title.x = element_text(size = 12), axis.title.y = element_text(size = 12))
    
    ## ===!!CAREFUL, fix this!!===
    #print(pg) # for paralleplots
    return(pg) # for multiplot
}

lattice_barchart <- function(df) {
    xdf <- namerows(df, col.name='Protein')
    xdf <- melt(xdf, id.var='Protein')
    v <- stringr::str_split_fixed(xdf$variable, '_', 2)
    xdf <- data.frame(xdf, v)
    res <- barchart(value ~ X2|Protein, groups=X1, data=xdf, scales=list(x=list(rot=90)), par.settings=list(superpose.polygon=list(col='lightgreen')))
    #barchart(value ~ X2|Protein+X1, data=ma, scales=list(x=list(rot=90)), par.settings=list(superpose.polygon=list(col='blue')))
    return(res)
}


gplot_barplot <- function(df, title=NULL) {
    ## parameters:
    # df: data.frame sample data
    # D042417: added parameter (title); modified 2nd line, added ifelse()
    v <- stringr::str_split_fixed(colnames(df), '_', 2) # this line and next moved D21217
    title <- ifelse(is.null(title), unique(v[,1]), title) # modified D042417: added ifelse()
    df <- modTMTsixplexLabelNames(df) # added D21217
    
    xdf <- namerows(df, col.name='Protein')
    xdf <- melt(xdf, id.var = 'Protein')
    colnames(xdf) <- c('Protein', 'Samples', 'Abundance')
        
    #v <- stringr::str_split_fixed(xdf$Samples, '_', 2)
    #title <- unique(v[,1])

    pg <- ggplot(xdf, aes(Samples, Abundance)) + geom_bar(stat='identity', fill='lightblue', alpha=1)
    pg <- pg + labs(x='Development Stage', size=10)
    pg <- pg + facet_grid(. ~ Protein) + ggtitle(title)
    pg <- pg + theme(axis.text.x = element_text(angle=90, hjust=1), plot.title=element_text(color='blue', hjust=0.5))
    
    return(pg) # for multiplot
}

# D031417: v0 here, v1 in ds_analysis_21JAN17.Rnw, v2 (modified version of v1) below
plotECDF <- function(hdf, df) {
    # see ds_analysis_21JAN17.Rnw for how it is used
    cnames <- as.character(colnames(df))
    xl <- strsplit(cnames, split='_')
    xl <- lapply(xl, function(x) x[1])
    x <- sub('S', '', unlist(xl))
    spls <- unique(x)
    
    pltl <- NULL
    for (spl in spls) {
        ixs <- grep(spl, colnames(df))
        ld <- stack(df[, ixs])
        xhk <- hdf[, ixs]

        pdf(NULL)
        dev.control(displaylist="enable")
        par.orig <- par(mfrow = c(2, 3), oma=c(0, 0, 3, 0))
        for (ch in as.character(unique(ld$ind))) {
            ldvals <- ld[ld$ind == ch,]$values
            f <- ecdf(ldvals)
            
            clm <- which(colnames(xhk)==ch)
            hkvals <- xhk[, clm]
            names(hkvals) <- rownames(xhk)
            hkvals <<- hkvals[!is.na(hkvals)]
            p <- f(as.numeric(hkvals))
           
            protcoordl <- list()
            for (prot in names(hkvals)) {
                protcoordl[[prot]] <- c(as.numeric(hkvals[prot]), 0, as.numeric(hkvals[prot]), f(as.numeric(hkvals[prot])))
            }
            
            main <- unlist(strsplit(ch, split='_'))[2]
            plot(f, main=main, xlab='Protein Expression (Abundance)', ylab='Cumulative Expression', col.main='orange') # turquoise
            for (nm in names(protcoordl)) {
                lines(list(x=c(protcoordl[[nm]][1], protcoordl[[nm]][3]), y=c(protcoordl[[nm]][2], protcoordl[[nm]][4])), col='blue')
                jcoords <- jitter(protcoordl[[nm]][3:4], factor=1, amount=0.08)
                text(x=jcoords[1], y=jcoords[2], labels=nm, col='blue', cex=0.7, adj=c(0,0))
                title(paste('Sample', spl), outer=TRUE, col.main='lightgreen', cex.main=1.5)
            }
        }
        par(par.orig)
        plt <- recordPlot()
        invisible(dev.off())
        splname <- paste('s', spl, sep='')
        pltl[[splname]] <- plt
    }
    return(pltl)
}

# modified D031417:
# v2 plot directly without saving
# remove lines and replace by points
plotECDF_v2 <- function(hdf, df, spl) {
    df <- df[,grep(spl, colnames(df), ignore.case=TRUE)]
    ld <- stack(df)

    #par.orig <- par(mfrow = c(2, 3), oma=c(0, 0, 3, 0))
    for (ch in as.character(unique(ld$ind))[1]) {
        ldvals <- ld[ld$ind == ch,]$values
        f <- ecdf(ldvals)
        
        clm <- which(colnames(hdf)==ch)
        hkvals <- hdf[, clm]
        names(hkvals) <- rownames(hdf)
        hkvals <<- hkvals[!is.na(hkvals)]
        p <- f(as.numeric(hkvals))
           
        protcoordl <- list()
        for (prot in names(hkvals)) {
            protcoordl[[prot]] <- c(as.numeric(hkvals[prot]), 0, as.numeric(hkvals[prot]), f(as.numeric(hkvals[prot])))
        }
        
        main <- ''#unlist(strsplit(ch, split='_'))[2]
        plot(f, main=main, xlab='Protein Expression (Abundance)', ylab='Cumulative Expression', col.main='orange') # turquoise
        for (nm in names(protcoordl)) {
            points(list(x=c(protcoordl[[nm]][1]), y=c(protcoordl[[nm]][4])), col='blue', pch=20)
            jcoords <- jitter(protcoordl[[nm]][3:4], factor=1, amount=0.08)
            #title(paste('Sample', spl), outer=TRUE, col.main='lightgreen', cex.main=1.5)
        }
    }
}

# D031717: same as v2 but using fit$coef instead of mss
plotECDF_v3 <- function(hdf, df, stage) {
    ldvals <- df[,grep(stage, colnames(df))]
    f <- ecdf(ldvals)
        
    clm <- which(colnames(hdf)==stage)
    hkvals <- hdf[, clm]
    names(hkvals) <- rownames(hdf)
    hkvals <<- hkvals[!is.na(hkvals)]
    p <- f(as.numeric(hkvals))
           
    protcoordl <- list()
    for (prot in names(hkvals)) {
        protcoordl[[prot]] <- c(as.numeric(hkvals[prot]), 0, as.numeric(hkvals[prot]), f(as.numeric(hkvals[prot])))
    }
        
    main <- stage
    plot(f, main=main, xlab='Protein Expression (Abundance)', ylab='Cumulative Expression', col.main='orange') # turquoise
    names(protcoordl) <- unlist(mget(names(protcoordl), eacc2sym, ifnotfound=unlist(mget(names(protcoordl), eBBacc2sym, ifnotfound=names(protcoordl)))))
    counter <- 1
    for (nm in names(protcoordl)) {
        points(list(x=c(protcoordl[[nm]][1]), y=c(protcoordl[[nm]][4])), col='blue', pch=20)
        #jcoords <- jitter(protcoordl[[nm]][3:4], factor=1, amount=0.08)
        if (counter %% 2 != 0) {
            text(x=protcoordl[[nm]][1], y=protcoordl[[nm]][4], labels=nm, col='red', cex=0.6, adj=c(0,0))
        } else {
            #text(x=protcoordl[[nm]][1]-0.7*length(nm), y=protcoordl[[nm]][4], labels=nm, col='red', cex=0.6, adj=c(0.5,0))
            text(x=protcoordl[[nm]][1], y=protcoordl[[nm]][4], labels=nm, col='red', cex=0.6, adj=c(1, 0.5))
        }
        counter <- counter + 1
        }
}

# D031717: using ggplot2 with ggrepel
plotECDF_v4 <- function(hdf, df, stage) {
    ldvals <- df[,grep(stage, colnames(df))]
    f <- ecdf(ldvals)

    clm <- which(colnames(hdf)==stage)
    hkvals <- hdf[, clm]
    names(hkvals) <- rownames(hdf)
    hkvals <- hkvals[!is.na(hkvals)]
    p <- f(as.numeric(hkvals))
           
    protcoordl <- list()
    for (prot in names(hkvals)) {
        protcoordl[[prot]] <- c(as.numeric(hkvals[prot]), 0, as.numeric(hkvals[prot]), f(as.numeric(hkvals[prot])))
    }
    names(protcoordl) <- unlist(mget(names(protcoordl), eacc2sym, ifnotfound=unlist(mget(names(protcoordl), eBBacc2sym, ifnotfound=names(protcoordl)))))
    
    protcoordl.df <- as.data.frame(t(as.data.frame(protcoordl)))
    # need only abundances and percentiles to reduce crowding of labels
    protcoordl.df <- protcoordl.df[,c(1, 4)]
    colnames(protcoordl.df) <- c('Abundance', 'Percentile')
    
    g <- ggplot(df, aes_string(stage)) + stat_ecdf(geom='step')
    g <- g + geom_point(data=protcoordl.df, aes(x=Abundance, y=Percentile), color='red')
    g <- g + geom_text_repel(data=protcoordl.df, aes(x=Abundance, y=Percentile, label=rownames(protcoordl.df)), size=4, color='blue')
    g <- g + ggtitle(stage) + labs(x='Protein Expression(Abundance',  y='Percentile')
    g <- g + theme(plot.title=element_text(color='orange', size=15, face='bold', hjust=0.5))
    plot(g)
}

# D032117: with a grouping factor
plotECDF_v5 <- function(df, stage, prot1, prot2) {
    # now just 2 vectors of proteins, could be extended
    # df: data frame with stage columns, S0c, S1c etc
    # stage: S0c, S1c etc
    require(RColorBrewer)
    require(ggrepel)
    ldvals <- df[,grep(stage, colnames(df))]
    f <- ecdf(ldvals)
    
    clm <- which(colnames(df)==stage)
    clm.df <- df[, clm, drop=FALSE]
    
    p1.df <-  clm.df[rownames(clm.df) %in% prot1,, drop=FALSE]
    p1.df <- data.frame(p1.df, Percentile=f(as.numeric(unlist(c(p1.df)))), Group='Signifiant')
    p2.df <- clm.df[rownames(clm.df) %in% prot2,, drop=FALSE]
    p2.df <- data.frame(p2.df, Percentile=f(as.numeric(unlist(c(p2.df)))), Group='Markers')
    duprows <- rownames(p2.df) %in% rownames(p1.df)
    p.df <- rbind(p1.df, p2.df[!duprows,])
    colnames(p.df) <- c('Abundance', 'Percentile', 'Group')
    rownames(p.df) <- unlist(mget(rownames(p.df), eacc2sym, ifnotfound=unlist(mget(rownames(p.df), eBBacc2sym, ifnotfound=rownames(p.df)))))

    # colors (from stackoverflow)
    myColors <- brewer.pal(5,"Set1")
    names(myColors) <- levels(p.df$Group)
    colScale <- scale_colour_manual(name = "Group",values = myColors)
    colScale <- scale_colour_manual(values = c("darkgreen", "royalblue")) # dodgerblue, midnightblue, navy, royalblue; darkgreen, darkseagreen
    
    g <- ggplot(df, aes_string(stage)) + stat_ecdf(geom='step')
    g <- g + geom_point(data=p.df, aes(x=Abundance, y=Percentile), color='red')
    g <- g + geom_text_repel(data=p.df, aes(x=Abundance, y=Percentile, label=rownames(p.df), color=factor(Group)), size=4)
    g <- g + ggtitle(stage) + labs(x='Protein Expression (Abundance)',  y='Percentile')
    g <- g + theme(plot.title=element_text(color='orange', size=15, face='bold', hjust=0.5), legend.position='none')
    g <- g + colScale
    plot(g)
}


# D032017: adding another parameter for marker data
plotECDF_vX <- function(hdf, protlst, df, stage) {
    ldvals <- df[,grep(stage, colnames(df))]
    f <- ecdf(ldvals)
    
    dfc <- which(colnames(df) == stage)
    xvls <- df[rownames(df) %in% protlst[[stage]], dfc]
    names(xvls) <- protlst[[stage]][protlst[[stage]] %in% rownames(df)]
    xvls <- xvls[!is.na(xvls)]
    p <- f(as.numeric(xvls))

    markercoordl <- list()
    for (prot in names(xvls)) {
        markercoordl[[prot]] <- c(as.numeric(xvls[prot]), 0, as.numeric(xvls[prot]), f(as.numeric(xvls[prot])))
    }
    names(markercoordl) <- unlist(mget(names(markercoordl), eacc2sym, ifnotfound=unlist(mget(names(markercoordl), eBBacc2sym, ifnotfound=names(markercoordl)))))
    markercoordl.df <- as.data.frame(t(as.data.frame(markercoordl)))
    # abundances and percentiles
    markercoordl.df <- markercoordl.df[,c(1, 4)]
    colnames(markercoordl.df) <- c('Abundance', 'Percentile')

    clm <- which(colnames(hdf) == stage)
    hkvals <- hdf[, clm]
    names(hkvals) <- rownames(hdf)
    hkvals <- hkvals[!is.na(hkvals)]
    p <- f(as.numeric(hkvals))
           
    hkcoordl <- list()
    for (prot in names(hkvals)) {
        hkcoordl[[prot]] <- c(as.numeric(hkvals[prot]), 0, as.numeric(hkvals[prot]), f(as.numeric(hkvals[prot])))
    }
    names(hkcoordl) <- unlist(mget(names(hkcoordl), eacc2sym, ifnotfound=unlist(mget(names(hkcoordl), eBBacc2sym, ifnotfound=names(hkcoordl)))))
    hkcoordl.df <- as.data.frame(t(as.data.frame(hkcoordl)))
    # abundances and percentiles
    hkcoordl.df <- hkcoordl.df[,c(1, 4)]
    colnames(hkcoordl.df) <- c('Abundance', 'Percentile')
    
    
    g <- ggplot(df, aes_string(stage)) + stat_ecdf(geom='step')
    
    g <- g + geom_point(data=hkcoordl.df, aes(x=Abundance, y=Percentile), color='red')
    g <- g + geom_text_repel(data=hkcoordl.df, aes(x=Abundance, y=Percentile, label=rownames(hkcoordl.df)), size=4, color='blue')
    
    g <- g + geom_point(data=markercoordl.df, aes(x=Abundance, y=Percentile), color='green')
    g <- g + geom_text_repel(data=markercoordl.df, aes(x=Abundance, y=Percentile, label=rownames(markercoordl.df)), size=4, color='red')
        
    g <- g + ggtitle(stage) + labs(x='Protein Expression(Abundance',  y='Percentile')
    g <- g + theme(plot.title=element_text(color='orange', size=15, face='bold', hjust=0.5))
    plot(g)
}

# this is a copy from ds_analysis_A_27FEB17.Rnw:label=plotresults (D21517)
addAnnotTt <- function(tt) {
    # tt: output from topTable() with fixed contrast, eg., c1
    # contrast: eg., T5vsT4 for title
    # annot: either 'gene' or 'acc' (or some other string)
    pname <- unlist(mget(rownames(tt), eacc2name, ifnotfound=unlist(mget(rownames(tt), eBBacc2name, ifnotfound=rownames(tt)))))
    df <- data.frame(Name=pname,tt)
    genesym <- unlist(mget(rownames(tt), eacc2sym, ifnotfound=unlist(mget(rownames(tt), eBBacc2sym, ifnotfound=rownames(tt)))))
    df <- data.frame(Symbol=genesym, df)
    df$logFC <- ifelse(df$logFC < 0, -2^(-df$logFC), 2^df$logFC)
    df <- df[, c(1:3,7)]
    colnames(df) <- c('Symbol', 'Name', 'FC', 'pval')
    return(df)
}

## not done (D22717)
addAnnotTt_lnk<- function(tt) {
    # tt: output from topTable() with fixed contrast, eg., c1
    # contrast: eg., T5vsT4 for title
    # annot: either 'gene' or 'acc' (or some other string)
    pname <- unlist(mget(rownames(tt), eacc2name, ifnotfound=unlist(mget(rownames(tt), eBBacc2name, ifnotfound=rownames(tt)))))
    df <- data.frame(Name=pname,tt)
    genesym <- unlist(mget(rownames(tt), eacc2sym, ifnotfound=unlist(mget(rownames(tt), eBBacc2sym, ifnotfound=rownames(tt)))))
    # doesn't work
    genesym <- paste('www.genecards.org/cgi-bin/carddisp.pl?gene',genesym, sep='=')
    # something like this
    #doc <- tags$html(tags$body(a(href="http://www.lalala.com"))
    df <- data.frame(Symbol=genesym, df)
    df$logFC <- ifelse(df$logFC < 0, -2^(-df$logFC), 2^df$logFC)
    df <- df[, c(1:3, 7)]
    colnames(df) <- c('Symbol', 'Name', 'FC', 'pval')
    return(df)
}

#mss.df <- as.data.frame(exprs(mss))
#hk.df <- mss.df[rownames(mss.df) %in% hk,]
#plotECDF(hk.df, mss.df)


## ==== This function taken from the web ====
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
    library(grid)

    # Make a list from the ... arguments and plotlist
    plots <- c(list(...), plotlist)

    numPlots = length(plots)

    # If layout is NULL, then use 'cols' to determine layout
    if (is.null(layout)) {
        # Make the panel
        # ncol: Number of columns of plots
        # nrow: Number of rows needed, calculated from # of cols
        layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                         ncol = cols, nrow = ceiling(numPlots/cols))
    }

    if (numPlots==1) {
        print(plots[[1]])

    } else {
        # Set up the page
        grid.newpage()
        pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))

        # Make each plot, in the correct location
        for (i in 1:numPlots) {
        # Get the i,j matrix positions of the regions that contain this subplot
            matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))

            print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                            layout.pos.col = matchidx$col))
        }
    }
}

@ 
\end{document}
